from torch import nn, Tensor
import torch
import math
from typing import Optional, Union, Callable
import torch.nn.functional as F
import copy
import pytorch_lightning as pl
from torch.autograd import Variable
from parksim.trajectory_predict.intent_transformer.model_utils import generate_square_subsequent_mask

def _get_clones(module, N):
    return nn.ModuleList([copy.deepcopy(module) for i in range(N)])

class PositionalEncoding(nn.Module):

    def __init__(self, d_model: int, dropout: float = 0.1, max_len: int = 5000):
        super().__init__()
        self.dropout = nn.Dropout(p=dropout)

        position = torch.arange(max_len).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2)
                             * (-math.log(10000.0) / d_model))
        pe = torch.zeros(max_len, 1, d_model)
        pe[:, 0, 0::2] = torch.sin(position * div_term)
        pe[:, 0, 1::2] = torch.cos(position * div_term)
        self.register_buffer('pe', pe)

    def forward(self, x):
        """
        Args:
            x: Tensor, shape [seq_len, batch_size, embedding_dim]
        """
        x = x + self.pe[:x.size(0)]
        return self.dropout(x)

class ImageFeatureEncoder(nn.Module):
    """
    Transformer Encoder that performs cross attention over image features,
    typically generated by a CNN.
    """
    __constants__ = ['norm']

    def __init__(self, encoder_layer, num_layers, norm=None):
        super(ImageFeatureEncoder, self).__init__()
        self.layers = _get_clones(encoder_layer, num_layers)
        self.num_layers = num_layers
        self.norm = norm

    def forward(self, src: Tensor, img_features: Tensor, mask: Optional[Tensor] = None, src_key_padding_mask: Optional[Tensor] = None) -> Tensor:
        r"""Pass the input through the encoder layers in turn.

        Args:
            src: the sequence to the encoder (required).
            mask: the mask for the src sequence (optional).
            src_key_padding_mask: the mask for the src keys per batch (optional).

        Shape:
            see the docs in Transformer class.
        """
        output = src

        for mod in self.layers:
            output = mod(output, img_features, src_mask=mask, src_key_padding_mask=src_key_padding_mask)

        if self.norm is not None:
            output = self.norm(output)

        return output

class ImageFeatureEncoderLayer(nn.Module):
    __constants__ = ['batch_first', 'norm_first']

    def __init__(self, d_model: int, nhead: int, dim_feedforward: int = 2048, dropout: float = 0.1,
                 activation: Union[str, Callable[[Tensor], Tensor]] = F.gelu,
                 layer_norm_eps: float = 1e-5, batch_first: bool = True, norm_first: bool = False,
                 device=None, dtype=None) -> None:
        factory_kwargs = {'device': device, 'dtype': dtype}
        super(ImageFeatureEncoderLayer, self).__init__()
        self.self_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout, batch_first=batch_first,
                                            **factory_kwargs)
        self.img_multihead_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout, batch_first=batch_first,
                                            **factory_kwargs)
        # Implementation of Feedforward model
        self.linear1 = nn.Linear(d_model, dim_feedforward, **factory_kwargs)
        self.dropout = nn.Dropout(dropout)
        self.linear2 = nn.Linear(dim_feedforward, d_model, **factory_kwargs)

        self.norm_first = norm_first
        self.norm1 = nn.LayerNorm(d_model, eps=layer_norm_eps, **factory_kwargs)
        self.norm2 = nn.LayerNorm(d_model, eps=layer_norm_eps, **factory_kwargs)
        self.norm3 = nn.LayerNorm(d_model, eps=layer_norm_eps, **factory_kwargs)
        self.dropout1 = nn.Dropout(dropout)
        self.dropout2 = nn.Dropout(dropout)
        self.dropout3 = nn.Dropout(dropout)
        self.activation = activation

    def __setstate__(self, state):
        if 'activation' not in state:
            state['activation'] = F.relu
        super(ImageFeatureEncoderLayer, self).__setstate__(state)

    def forward(self, src: Tensor, img_features: Tensor, src_mask: Optional[Tensor] = None, src_key_padding_mask: Optional[Tensor] = None) -> Tensor:
        r"""Pass the input through the encoder layer.

        Args:
            src: the sequence to the encoder layer (required).
            src_mask: the mask for the src sequence (optional).
            src_key_padding_mask: the mask for the src keys per batch (optional).

        Shape:
            see the docs in Transformer class.
        """

        # see Fig. 1 of https://arxiv.org/pdf/2002.04745v1.pdf

        x = src
        if self.norm_first:
            x = x + self._sa_block(self.norm1(x), src_mask, src_key_padding_mask)
            x = x + self._image_feature_mha_block(self.norm3(x), img_features)
            x = x + self._ff_block(self.norm2(x))
        else:
            x = self.norm1(x + self._sa_block(x, src_mask, src_key_padding_mask))
            x = self.norm3(x + self._image_feature_mha_block(x, img_features))
            x = self.norm2(x + self._ff_block(x))

        return x


    # self-attention block
    def _sa_block(self, x: Tensor,
                  attn_mask: Optional[Tensor], key_padding_mask: Optional[Tensor]) -> Tensor:
        x = self.self_attn(x, x, x,
                           attn_mask=attn_mask,
                           key_padding_mask=key_padding_mask,
                           need_weights=False)[0]
        return self.dropout1(x)

    # feed forward block
    def _ff_block(self, x: Tensor) -> Tensor:
        x = self.linear2(self.dropout(self.activation(self.linear1(x))))
        return self.dropout2(x)

    # intent attention block
    def _image_feature_mha_block(self, x: Tensor, img_features: Tensor,
                          attn_mask: Optional[Tensor]=None, key_padding_mask: Optional[Tensor]=None) -> Tensor:
        x = self.img_multihead_attn(x, img_features, img_features,
                                attn_mask=attn_mask,
                                key_padding_mask=key_padding_mask,
                                need_weights=False)[0]
        return self.dropout3(x)

class TrajectoryEncoder(nn.Module):
    """
    Transformer Encoder that encodes trajectory history (src), while performing
    cross attention over the intent and an encoding of the image.
    """
    __constants__ = ['norm']

    def __init__(self, encoder_layer, num_layers, norm=None):
        super(TrajectoryEncoder, self).__init__()
        self.layers = _get_clones(encoder_layer, num_layers)
        self.num_layers = num_layers
        self.norm = norm

    def forward(self, src: Tensor, img_encoding: Tensor, intent: Tensor, mask: Optional[Tensor] = None, src_key_padding_mask: Optional[Tensor] = None) -> Tensor:
        r"""Pass the input through the encoder layers in turn.

        Args:
            src: the sequence to the encoder (required).
            mask: the mask for the src sequence (optional).
            src_key_padding_mask: the mask for the src keys per batch (optional).

        Shape:
            see the docs in Transformer class.
        """
        output = src

        for mod in self.layers:
            output = mod(output, img_encoding, intent, src_mask=mask, src_key_padding_mask=src_key_padding_mask)

        if self.norm is not None:
            output = self.norm(output)

        return output

class TrajectoryEncoderLayer(nn.Module):
    __constants__ = ['batch_first', 'norm_first']

    def __init__(self, d_model: int, nhead: int, dim_feedforward: int = 2048, dropout: float = 0.1,
                 activation: Union[str, Callable[[Tensor], Tensor]] = F.gelu,
                 layer_norm_eps: float = 1e-5, batch_first: bool = True, norm_first: bool = False,
                 device=None, dtype=None) -> None:
        factory_kwargs = {'device': device, 'dtype': dtype}
        super(TrajectoryEncoderLayer, self).__init__()
        self.self_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout, batch_first=batch_first,
                                            **factory_kwargs)
        self.img_encoding_multihead_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout, batch_first=batch_first,
                                            **factory_kwargs)
        # Implementation of Feedforward model
        self.linear1 = nn.Linear(d_model, dim_feedforward, **factory_kwargs)
        self.dropout = nn.Dropout(dropout)
        self.linear2 = nn.Linear(dim_feedforward, d_model, **factory_kwargs)

        self.norm_first = norm_first
        self.norm1 = nn.LayerNorm(d_model, eps=layer_norm_eps, **factory_kwargs)
        self.norm2 = nn.LayerNorm(d_model, eps=layer_norm_eps, **factory_kwargs)
        self.norm3 = nn.LayerNorm(d_model, eps=layer_norm_eps, **factory_kwargs)
        self.norm4 = nn.LayerNorm(d_model, eps=layer_norm_eps, **factory_kwargs)

        self.dropout1 = nn.Dropout(dropout)
        self.dropout2 = nn.Dropout(dropout)
        self.dropout3 = nn.Dropout(dropout)
        self.dropout4 = nn.Dropout(dropout)
        self.activation = activation

    def __setstate__(self, state):
        if 'activation' not in state:
            state['activation'] = F.relu
        super(TrajectoryEncoderLayer, self).__setstate__(state)

    def forward(self, traj_src: Tensor, img_encoding: Tensor, intent: Tensor, src_mask: Optional[Tensor] = None, src_key_padding_mask: Optional[Tensor] = None) -> Tensor:
        r"""Pass the input through the encoder layer.

        Args:
            src: the sequence to the encoder layer (required).
            src_mask: the mask for the src sequence (optional).
            src_key_padding_mask: the mask for the src keys per batch (optional).

        Shape:
            see the docs in Transformer class.
        """

        # see Fig. 1 of https://arxiv.org/pdf/2002.04745v1.pdf

        x = traj_src
        if self.norm_first:
            x = x + self._sa_block(self.norm1(x), src_mask, src_key_padding_mask)
            x = x + self._image_encoding_mha_block(self.norm2(x), img_encoding)
            x = x + self._intent_mha_block(self.norm3(x), intent)
            x = x + self._ff_block(self.norm4(x))
        else:
            x = self.norm1(x + self._sa_block(x, src_mask, src_key_padding_mask))
            x = self.norm2(x + self._image_encoding_mha_block(x, img_encoding))
            x = self.norm3(x + self._intent_mha_block(x, intent))
            x = self.norm4(x + self._ff_block(x))

        return x


    # self-attention block
    def _sa_block(self, x: Tensor,
                  attn_mask: Optional[Tensor], key_padding_mask: Optional[Tensor]) -> Tensor:
        x = self.self_attn(x, x, x,
                           attn_mask=attn_mask,
                           key_padding_mask=key_padding_mask,
                           need_weights=False)[0]
        return self.dropout1(x)

    # feed forward block
    def _ff_block(self, x: Tensor) -> Tensor:
        x = self.linear2(self.dropout(self.activation(self.linear1(x))))
        return self.dropout2(x)

    # intent attention block
    def _image_encoding_mha_block(self, x: Tensor, img_encoding: Tensor,
                          attn_mask: Optional[Tensor]=None, key_padding_mask: Optional[Tensor]=None) -> Tensor:
        x = self.img_encoding_multihead_attn(x, img_encoding, img_encoding,
                                attn_mask=attn_mask,
                                key_padding_mask=key_padding_mask,
                                need_weights=False)[0]
        return self.dropout3(x)

    def _intent_mha_block(self, x: Tensor, intent: Tensor,
                        attn_mask: Optional[Tensor]=None, key_padding_mask: Optional[Tensor]=None) -> Tensor:
        """
        Intent has shape (N, 1, dim_encoder), and we will append zeros so that it has
        shape (N, 2, dim_encoder).
        """
        zeros = torch.zeros_like(intent, device=x.device)
        new_intent = torch.cat((intent, zeros), dim=1)
        x = self.img_encoding_multihead_attn(x, new_intent, new_intent,
                                attn_mask=attn_mask,
                                key_padding_mask=key_padding_mask,
                                need_weights=False)[0]
        return self.dropout4(x)

class IntentCrossAttentionDecoder(nn.Module):
    """
    A transformer decoder that performs cross attention over the intent.
    """
    __constants__ = ['norm']

    def __init__(self, decoder_layer, num_layers, norm=None):
        super(IntentCrossAttentionDecoder, self).__init__()
        self.layers = _get_clones(decoder_layer, num_layers)
        self.num_layers = num_layers
        self.norm = norm

    def forward(self, tgt: Tensor, memory: Tensor, intent: Tensor, tgt_mask: Optional[Tensor] = None,
                memory_mask: Optional[Tensor] = None, tgt_key_padding_mask: Optional[Tensor] = None,
                memory_key_padding_mask: Optional[Tensor] = None) -> Tensor:
        """Pass the inputs (and mask) through the decoder layer in turn.

        Args:
            tgt: the sequence to the decoder (required).
            memory: the sequence from the last layer of the encoder (required).
            intent: encoding of intent (required).
            tgt_mask: the mask for the tgt sequence (optional).
            memory_mask: the mask for the memory sequence (optional).
            tgt_key_padding_mask: the mask for the tgt keys per batch (optional).
            memory_key_padding_mask: the mask for the memory keys per batch (optional).

        Shape:
            see the docs in Transformer class.
        """
        output = tgt

        for mod in self.layers:
            output = mod(output, memory, intent, tgt_mask=tgt_mask,
                         memory_mask=memory_mask,
                         tgt_key_padding_mask=tgt_key_padding_mask,
                         memory_key_padding_mask=memory_key_padding_mask)

        if self.norm is not None:
            output = self.norm(output)

        return output

class IntentCrossAttentionDecoderLayer(nn.Module):
    def __init__(self, 
                d_model: int, 
                nhead: int, 
                dim_feedforward: int = 2048, 
                dropout: float = 0.1,
                activation: Union[str, Callable[[Tensor], Tensor]] = F.gelu,
                layer_norm_eps: float = 1e-5, 
                batch_first: bool = False, norm_first: bool = False,
                device=None, dtype=None) -> None:
        
        factory_kwargs = {'device': device, 'dtype': dtype}
        super(IntentCrossAttentionDecoderLayer, self).__init__()
        self.self_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout, batch_first=batch_first,
                                            **factory_kwargs)

        self.multihead_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout, batch_first=batch_first,
                                            **factory_kwargs)

        self.intent_multihead_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout, batch_first=batch_first,
                                            **factory_kwargs)

        # Implementation of Feedforward model
        self.linear1 = nn.Linear(d_model, dim_feedforward, **factory_kwargs)
        self.dropout = nn.Dropout(dropout)
        self.linear2 = nn.Linear(dim_feedforward, d_model, **factory_kwargs)

        self.norm_first = norm_first
        self.norm1 = nn.LayerNorm(
            d_model, eps=layer_norm_eps, **factory_kwargs)
        self.norm2 = nn.LayerNorm(
            d_model, eps=layer_norm_eps, **factory_kwargs)
        self.norm3 = nn.LayerNorm(
            d_model, eps=layer_norm_eps, **factory_kwargs)
        self.norm4 = nn.LayerNorm(
            d_model, eps=layer_norm_eps, **factory_kwargs)
        self.dropout1 = nn.Dropout(dropout)
        self.dropout2 = nn.Dropout(dropout)
        self.dropout3 = nn.Dropout(dropout)
        self.dropout4 = nn.Dropout(dropout)

        self.activation = activation

    def __setstate__(self, state):
        if 'activation' not in state:
            state['activation'] = F.relu
        super(IntentCrossAttentionDecoderLayer, self).__setstate__(state)

    def forward(self, tgt: Tensor, 
                memory: Tensor, 
                intent: Tensor, 
                tgt_mask: Optional[Tensor] = None, 
                memory_mask: Optional[Tensor] = None,
                tgt_key_padding_mask: Optional[Tensor] = None, memory_key_padding_mask: Optional[Tensor] = None) -> Tensor:
        """Pass the inputs (and mask) through the decoder layer.

        Args:
            tgt: the sequence to the decoder layer (required).
            memory: the sequence from the last layer of the encoder (required).
            intent: processed intent vector (required).
            tgt_mask: the mask for the tgt sequence (optional).
            memory_mask: the mask for the memory sequence (optional).
            tgt_key_padding_mask: the mask for the tgt keys per batch (optional).
            memory_key_padding_mask: the mask for the memory keys per batch (optional).

        Shape:
            see the docs in Transformer class.
        """
        x = tgt
        if self.norm_first:
            x = x + self._sa_block(self.norm1(x), tgt_mask,
                                   tgt_key_padding_mask)
            x = x + self._mha_block(self.norm2(x), memory,
                                    memory_mask, memory_key_padding_mask)
            x = x + self._intent_mha_block(self.norm3(x), intent,
                                    memory_mask, memory_key_padding_mask)
            x = x + self._ff_block(self.norm4(x))
        else:
            x = self.norm1(
                x + self._sa_block(x, tgt_mask, tgt_key_padding_mask))
            x = self.norm2(x + self._mha_block(x, memory,
                           memory_mask, memory_key_padding_mask))
            x = self.norm3(x + self._intent_mha_block(x, intent,
                           memory_mask, memory_key_padding_mask))
            x = self.norm4(x + self._ff_block(x))

        return x

    # self-attention block
    def _sa_block(self, x: Tensor,
                  attn_mask: Optional[Tensor], key_padding_mask: Optional[Tensor]) -> Tensor:
        x = self.self_attn(x, x, x,
                           attn_mask=attn_mask,
                           key_padding_mask=key_padding_mask,
                           need_weights=False)[0]
        return self.dropout1(x)

    # multihead attention block
    def _mha_block(self, x: Tensor, mem: Tensor,
                   attn_mask: Optional[Tensor], key_padding_mask: Optional[Tensor]) -> Tensor:
        x = self.multihead_attn(x, mem, mem,
                                attn_mask=attn_mask,
                                key_padding_mask=key_padding_mask,
                                need_weights=False)[0]
        return self.dropout2(x)

    # intent attention block
    def _intent_mha_block(self, x: Tensor, intent: Tensor,
                          attn_mask: Optional[Tensor], key_padding_mask: Optional[Tensor]) -> Tensor:
        new_intent = torch.cat((intent, torch.zeros_like(intent, device=intent.device)), dim=1)
        x = self.intent_multihead_attn(x, new_intent, new_intent,
                                attn_mask=attn_mask,
                                key_padding_mask=key_padding_mask,
                                need_weights=False)[0]
        return self.dropout3(x)

    # feed forward block
    def _ff_block(self, x: Tensor) -> Tensor:
        x = self.linear2(self.dropout(self.activation(self.linear1(x))))
        return self.dropout4(x)

class IntentFF(nn.Module):
    def __init__(self, d_in: int, d_out: int, d_hidden: int = 16, dropout_p: float = 0.1):
        super().__init__()
        self.linear1 = nn.Sequential(
            nn.Linear(d_in, d_hidden),
            nn.ReLU(),
            nn.LayerNorm(d_hidden),
            nn.Dropout(p=dropout_p)
        )
        self.linear2 = nn.Sequential(
            nn.Linear(d_hidden, d_out),
            nn.LayerNorm(d_out),
            nn.Dropout(p=dropout_p)
        )

    def forward(self, intent: Tensor):
        x = self.linear1(intent)
        x = self.linear2(x)

        return x

class BaseTransformerLightningModule(pl.LightningModule):
    def __init__(self, config: dict, input_shape=(3, 100, 100), loss_fn=F.l1_loss):
        super().__init__()
        self.save_hyperparameters()
        self.lr = 1e-3
        self.loss_fn = loss_fn

    def configure_optimizers(self):
        optimizer = torch.optim.AdamW(self.parameters(), lr=self.lr)
        lr_scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=5, verbose=True)
        lr_scheduler_config = {
            # REQUIRED: The scheduler instance
            "scheduler": lr_scheduler,
            # The unit of the scheduler's step size, could also be 'step'.
            # 'epoch' updates the scheduler on epoch end whereas 'step'
            # updates it after a optimizer update.
            "interval": "epoch",
            # How many epochs/steps should pass between calls to
            # `scheduler.step()`. 1 corresponds to updating the learning
            # rate after every epoch/step.
            "frequency": 1,
            # Metric to to monitor for schedulers like `ReduceLROnPlateau`
            "monitor": "val_total_loss",
            # If set to `True`, will enforce that the value specified 'monitor'
            # is available when the scheduler is updated, thus stopping
            # training if not found. If set to `False`, it will only produce a warning
            "strict": True,
            # If using the `LearningRateMonitor` callback to monitor the
            # learning rate progress, this keyword can be used to specify
            # a custom logged name
            "name": None,
        }
        return [optimizer], [lr_scheduler_config]

    def get_loss(self, pred, label, loss_type):
        total_loss = self.loss_fn(pred, label)
        with torch.no_grad():
            non_reduced_loss = self.loss_fn(pred, label, reduction="none")
            pos_error = torch.sqrt(non_reduced_loss[:, :, 0]**2 + non_reduced_loss[:, :, 1]**2).mean(dim=0)
            ang_error = non_reduced_loss[:, :, 2].mean(dim=0)
            metrics = {
                f"{loss_type}_total_loss" : total_loss
            }
            pos_errors_dict = {
                f"{loss_type}_step_{i+1}_positional_error" : pos_error[i] for i in range(pos_error.shape[0])
            }
            ang_errors_dict = {
                f"{loss_type}_step_{i+1}_angular_error" : ang_error[i] for i in range(ang_error.shape[0])
            }
            metrics.update(pos_errors_dict)
            metrics.update(ang_errors_dict)
            self.log_dict(metrics)
        return total_loss, metrics

    def training_step(self, batch, batch_idx):
        images_past, trajectory_history, intent_pose, trajectory_future_tgt, trajectory_future_label = batch
        mask = generate_square_subsequent_mask(trajectory_future_tgt.shape[1]).float().to(self.device)
        pred = self(images_past, trajectory_history, intent_pose, trajectory_future_tgt, mask)
        loss, _ = self.get_loss(pred, trajectory_future_label, "train")
        return loss

    def validation_step(self, batch, batch_idx):
        image, trajectory_history, intent_pose, trajectory_future_tgt, trajectory_future_label = batch
        mask = generate_square_subsequent_mask(trajectory_future_tgt.shape[1]).float().to(self.device)
        pred = self(image, trajectory_history, intent_pose, trajectory_future_tgt, mask)
        _, metrics = self.get_loss(pred, trajectory_future_label, "val")
        return metrics

    def test_step(self, batch, batch_idx):
        _, _, _, _, trajectory_future_label = batch
        pred = self.predict_sequence(batch)
        _, metrics = self.get_loss(pred, trajectory_future_label, "test")
        return metrics

    def predict_sequence(self, batch):
        image, trajectory_history, intent_pose, _, _ = batch
        START_TOKEN = trajectory_history[:, -1][:, None, :]
        output_sequence_length = 10
        y_input = START_TOKEN
        for _ in range(output_sequence_length):
            # Get source mask
            tgt_mask = generate_square_subsequent_mask(y_input.size(1)).float().to(self.device)
            pred = self(image, trajectory_history, intent_pose, y_input, tgt_mask)
            #pred = pred.permute(1, 0, 2)
            #print(pred)
            next_item = pred[:, -1][:, None, :]
            # Concatenate previous input with predicted best word
            y_input = torch.cat((y_input, next_item), dim=1)
        return y_input[:,1:]

class FeatureExtractorCNN(nn.Module):
    """
    Simple CNN.
    """
    def __init__(self, input_shape, num_output_features=128, dropout_p = 0.2, num_conv_layers=2):
        """
        Instantiate the model
        """
        super(FeatureExtractorCNN, self).__init__()
        
        self.image_layers = []

        self.num_output_features = num_output_features

        self.image_layers.append(nn.Sequential(
            nn.Conv2d(in_channels=3, out_channels=8, kernel_size=7, padding='same'),
            nn.Dropout(dropout_p),
            nn.LeakyReLU(negative_slope=0.01, inplace=True),
            nn.BatchNorm2d(num_features=8),
            nn.MaxPool2d(2),
        ))

        for _ in range(num_conv_layers):
            self.image_layers.append(nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=8, kernel_size=5, padding='same'),
                nn.Dropout(dropout_p),
                nn.LeakyReLU(negative_slope=0.01, inplace=True),
                nn.BatchNorm2d(num_features=8),
                #nn.MaxPool2d(2),
            ))

        self.image_layers.append(nn.Sequential(
            nn.Conv2d(in_channels=8, out_channels=num_output_features, kernel_size=3, padding='same'),
            nn.Dropout(dropout_p),
            nn.LeakyReLU(negative_slope=0.01, inplace=True),
            nn.BatchNorm2d(num_features=num_output_features),
            nn.MaxPool2d(2),
        ))

        self.image_layers.append(nn.Sequential(
            nn.Conv2d(in_channels=num_output_features, out_channels=num_output_features, kernel_size=3, padding='same'),
            nn.Dropout(dropout_p),
            nn.LeakyReLU(negative_slope=0.01, inplace=True),
            nn.BatchNorm2d(num_features=num_output_features),
        ))

        #Height and width divided by 4 because of 2 max pools
        channels, height, width = input_shape
        self.feature_size = (height // 4) * (width // 4)
        
        self.image_layer = nn.Sequential(*self.image_layers)

    # generate input sample and forward to get shape
    def _get_conv_output_size(self, shape):
        bs = 1
        input = Variable(torch.rand(bs, *shape))
        output_feat = self._forward_conv(input)
        n_size = output_feat.data.view(bs, -1).size(1)
        return n_size

    def _forward_conv(self, img_feature):
        x = self.image_layer(img_feature)
        return x

    def forward(self, img_feature):
        """
        forward method
        """
        N, _, _, _ = img_feature.shape
        x = self._forward_conv(img_feature)
        x = x.reshape(N, self.num_output_features, self.feature_size)
        return x

class PatchCNN(nn.Module):
    """
    Simple CNN.
    """
    def __init__(self, input_shape, num_output_features=128, dropout_p = 0.2, num_conv_layers=2):
        """
        Instantiate the model
        """
        super(PatchCNN, self).__init__()
        
        self.image_layers = []

        self.num_output_features = num_output_features

        self.image_layers.append(nn.Sequential(
            nn.Conv2d(in_channels=3, out_channels=8, kernel_size=7, padding='same'),
            nn.Dropout(dropout_p),
            nn.LeakyReLU(negative_slope=0.01, inplace=True),
            nn.BatchNorm2d(num_features=8),
            nn.MaxPool2d(2),
        ))

        for _ in range(num_conv_layers):
            self.image_layers.append(nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=8, kernel_size=5, padding='same'),
                nn.Dropout(dropout_p),
                nn.LeakyReLU(negative_slope=0.01, inplace=True),
                nn.BatchNorm2d(num_features=8),
                #nn.MaxPool2d(2),
            ))

        self.image_layers.append(nn.Sequential(
            nn.Conv2d(in_channels=8, out_channels=num_output_features, kernel_size=3, padding='same'),
            nn.Dropout(dropout_p),
            nn.LeakyReLU(negative_slope=0.01, inplace=True),
            nn.BatchNorm2d(num_features=num_output_features),
            nn.MaxPool2d(2),
        ))

        self.image_layers.append(nn.Sequential(
            nn.Conv2d(in_channels=num_output_features, out_channels=num_output_features, kernel_size=3, padding='same'),
            nn.Dropout(dropout_p),
            nn.LeakyReLU(negative_slope=0.01, inplace=True),
            nn.BatchNorm2d(num_features=num_output_features),
        ))

        #Height and width divided by 4 because of 2 max pools
        channels, height, width = input_shape
        self.feature_size = (height // 4) * (width // 4)
        
        self.image_layer = nn.Sequential(*self.image_layers)

    # generate input sample and forward to get shape
    def _get_conv_output_size(self, shape):
        bs = 1
        input = Variable(torch.rand(bs, *shape))
        output_feat = self._forward_conv(input)
        n_size = output_feat.data.view(bs, -1).size(1)
        return n_size

    def _forward_conv(self, img_feature):
        x = self.image_layer(img_feature)
        return x

    def forward(self, img_feature):
        """
        forward method
        """
        N, _, _, _ = img_feature.shape
        x = self._forward_conv(img_feature)
        x = x.reshape(N, self.num_output_features, self.feature_size)
        return x